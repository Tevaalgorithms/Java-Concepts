1. What is a class?  (3 points)

Class is a template for an object. Or A class is a blueprint from which individual objects are created.
It has methods and attributes that contributes in object’s behavior.

NOTE: The Java access modifiers private and protected cannot be assigned to a class except the inner class. 

2) Type of variables in java? 
(4 points to say - Where it’s defined, and when it’s initialized/created, scope and how to access it) 

Local variables : 
Variables defined inside methods, constructors or blocks are called local variables. 
The variable will be declared and initialized within the method and the variable will be destroyed when the method has completed.
Stores in STACK

B) Static Variables/ Class variables:  
These variables declared within a class, outside any method, 
with the static keyword.
Method area

C) Instance variables:
 Instance variables are variables within a class but outside any method. 
These variables are initialized when the class is instantiated. Instance variables can be accessed from inside any method, constructor or blocks of that particular class.
In the heap in the form object 

3.  What is an Object and constructor?

3.a) Object ( 3 points to say)
It’s an instance of a class. And Creating an instance initialize the constructor 

New keyword is used to create an instance 

It’s an instance of a Class. Say for example Animal is a class and Dog could be an object. 

Animal dog = new Animal();
Vachile car = new Vechile();

3. b) Constructor  ( 3 points to say) 
It has the same name as its class and it is similar to a method. 
However, constructors have no explicit return type.

4. What are Wrapper Classes? ( 3 points)
In java there are 8 primitive data types and every primitive data type has a class dedicated to it.
These are the primitive data types. (boolean, byte, char, int, float, double, long, short)
Wrapper classes convert java primitive data types to reference types (Objects).

5) Tell me about Immutable? ( 2 points) 
Once the object is created we can’t change it’s value.
Ex:  The String class is immutable, so that once it is created a String object cannot be changed. 

5. b) When to use String Buffer & String Builder?  
If there is a necessity to make a lot of modifications to Strings of characters, then you should use String Buffer & String Builder Classes.

6) Boxing:  Constructing the object from primitive data types.
int i = 10;
Integer ref = new Integer(i);

7) Unboxing:  Extracting the value from Object
int j = ref.intValue();

8) Difference between valueof and paraseit
Valueof returns Reference Type 
ParseInt return Primitive type
Eg: Integer k = Integer.valueOf(Integer.parseInt("123"))
9) Autoboxing:
Compile constructs a reference type from primitive type
int i = 10;
Integer kref = i; (In the compiler side the following happens:  Integer kref = new Integer(i))

10) Auto unboxing:
Compiler extract a primitive data type from reference type
Integer kref = new Integer(10);
int j = kref ;

11) What is Constructor in Java? (4 points)
A constructor initializes an object when it is created.
It is different from other methods in class. 
It needs to have class name.
No return type for this method.

12)  Destructor in Java? 2 points
It deletes the any extra resources allocated by the object. 
No destructors here in Java. The reason is that all Java objects are heap allocated and garbage collected. 

** The following is NOT MUST
There is an inherited method called finalize, but this is called entirely at the discretion of the garbage collector. So for classes that need to explicitly tidy up, the convention is to define a closemethod and use finalize only for sanity checking 

13. Copy Constructor? ( 3 points)
A copy constructor is a member function.
It initializes an object using another object of the same class.
        Address ad1 = new Address("Provo", 84604);
        Customer cus1 = new Customer("Sam", "Tom", ad1);
        Customer cus2 = new Customer("Tomy", "Jackson", ad1);        
        cus1.Print();
        cus2.Print();  

Note: Copy constructor is an easy alternative to java cloning mechanism.

When do we need it:  When we want to copy an object that is heavy to instantiate.

While writing copy constructor it’s very important to perform deep copy so that both the objects are detached. 

14) What is Clone method in Java? Why do we need it? 5 points
So cloning is about creating the copy of original object. 

If the class has only primitive data type members then a completely new copy of the object will be created and the reference to the new object copy will be returned.

If the class contains members of any class type then only the object references to those members are copied and hence the member references in both the original object as well as the cloned object refer to the same object.
 
Apart from above default behavior, you can always override this behavior and specify your own. This is done using overriding clone() method.

15. Inheritance: (3 points)
It allows one class to reuse the state and behaviour of another class. 

16. Multiple inheritance: ( 4 points)
If a child class inherits the property from multiple classes is known as multiple inheritance. Java does not allow to extend multiple classes.
The problem with multiple inheritance is that if multiple parent classes have a same method name, then at runtime it becomes difficult for the compiler to decide which method to execute from the child class.
Therefore, Java doesn’t support multiple inheritance. The problem is commonly referred as Diamond Problem


17. What is Association? 
(2 points) Association is relation between two separate classes which establishes through their Objects. 
EX: Bank and employees 


18. What is Aggregation? ( 3 points)
It’s HAS-A relationship. Here all object have their own life cycle but, there is no ownership between child and parent. 
Ex: Class instance and Students instance. 


19. What is composition?   ( 3 points)
It’s PART OF relationship. Here child object’s life cycle depend on the parent’s life cycle.
Ex:  House class and rooms classes. When house get destroyed, so are rooms. 


20. Polymorphism: (3 points)
Object take many forms. Inheritance and function overloading, operator overloading. The most common use of polymorphism in OOP occurs when a parent class reference is used to refer to a child class object.

21. What is Encapsulation? ( 3 points) 
Hiding the information about the code and data structure.


22. Pure virtual function/ Abstract class: ( 4 points) 
Base class only have function prototype without function definition. Child class needs to implement the method or at least keep it as same as base class abstract method. 
protected abstract void method(); // Java
Virtual void method() = 0; // c++


23. Access privileges ( 4 points): 
Private: Only accessible in the same class
Protected: accessible in Same Class, Subclass, Non-subclass,  different package subclass
Public: Everything is YES.  
24. Templates in Java (3 points): 
You can use Templates (C++)/ Generics(Java) to use the same code on different object types
 Advantage: Code reuse 
Java generics simply offer compile-time safety and eliminate the need for casts.
A C++ template gets reproduced and re-compiled entirely whenever a template is instantiated with a new class.

25. Difference between stack and heap ( 3 points)
Stack : Functions and local variables are created here. 
Heap: Where dynamically allocated memory created. Object is created 


Stack Access: Can’t be access by other threads 
Heap Access: Objects are globally accessible


Stack: Exist until the end of the execution of the thread 
Heap: Exist until the end of the program 


25. Method Overloading  ( 4 points)
Methods of the same class shares the same name but each method must have: 
Different number of parameters or 
Parameter having different types or
Parameter  order.
Method Overloading is to “add” or “extend” more to method’s behavior.
NOTE: changing access specifier also make it as a method overloading.. Just think why do we need to do that though.. It won’t make a sense to do that. At least that’s how I feel… 

26. Method Overriding ( 4 points)
Subclass have the same method with same name and exactly the same number and type of parameters and same return type as a superclass.
Method Overriding is to “Change” existing behavior of method.
It is a run time polymorphism.
The methods must have same signature.
It always requires inheritance in Method Overriding.


27. Difference between abstract class and interfaces. ( 7 points)
Abstract Class
Interfaces
An abstract class can provide complete, default code and/or just the details that have to be overridden.
An interface cannot provide any code at all,just the signature.
In case of abstract class, a class may extend only one abstract class.
A Class may implement several interfaces.
An abstract class can have non-abstract methods.
All methods of an Interface are abstract.
An abstract class can have instance variables.
An Interface cannot have instance variables
An abstract class can have any visibility: public, private, protected.
An Interface visibility must be public (or) none.
If we add a new method to an abstract class then we have the option of providing default implementation and therefore all the existing code might work properly
If we add a new method to an Interface then we have to track down all the implementations of the interface and define implementation for the new method
An abstract class can contain constructors
An Interface cannot contain constructors


28. What is “this” keyword: ( 4points)
It(this) works as a reference to the current Object, whose Method or constructor is being invoked.
this keyword in java can be used inside the Method or constructor of a class.
Static members don’t have “this” variable.
this keyword can also be used inside Methods to call another Method from same Class.


29. What is “Static” keyword (3 points)
It makes your program memory efficient. Need to use static keyword 


30. What is volatile keyword in Java ( 2 points)?
Using volatile is yet another way (like synchronized, atomic wrapper) of making class thread safe. .
Thread safe means that a method or class instance can be used by multiple threads at the same time without any problem.
class SharedObj {
  // volatile keyword here makes sure that the changes made in one thread are         // immediately reflect in other thread
   static volatile int sharedVar = 6;}
31. What is the assignment operator? 
Default assignment operator handles assigning one object to another object (Shallow copy)


**32. Difference between Throw and Throws ( 3 points)
throw keyword
throws keyword
Throw is used to explicitly throw an exception.
static void fun() { try{ throw new NullPointerException("demo"); }
Throws is used to declare an exception.
public static void main(String[] args)throws InterruptedException 
Throw is used within the method.
Throws is used with the method signature.
You cannot throw multiple exception
You can declare multiple exception e.g. public void method()throws IOException,SQLException.

33. Difference between process and Threads 6 points

Process
Thread
Definition
An executing instance of a program is called a process.
A thread is a subset of the process.
Communication
Processes must use inter-process communication to communicate with sibling processes.
Threads can directly communicate with other threads of its process.
Changes
Any change in the parent process does not affect child processes.
Any change in the main thread may affect the behavior of the other threads of the process.
Memory
Run in separate memory spaces.
Run in shared memory spaces.
Controlled by
Process is controlled by the operating system.
Threads are controlled by programmer in a program.
Dependence
Processes are independent.
Threads are dependent.

34.   Why Synchronized block?
When we start two or more threads within a program, there may be a situation when multiple threads try to access the same resource and finally they can produce unforeseen result due to concurrency issues.
So there is a need to synchronize the action of multiple threads and make sure that only one thread can access the resource at a given point in time. This is implemented using a concept called monitors. Each object in Java is associated with a monitor, which a thread can lock or unlock. 
Only one thread at a time may hold a lock on a monitor.
Java programming language provides a very handy way of creating threads and synchronizing their task by using synchronized blocks. You keep shared resources within this block. Following is the general form of the synchronized statement


35. Why Thread.join? ( 2 points)
The join() method which allows one thread to wait until another thread completes its execution.
Ex: If t is a Thread object whose thread is currently executing, then t.join() will make sure that t is terminated before the next instruction is executed by the program.
Ex: This will make sure that the main thread is not dead until all the child threads are done. 

35. b) What is Thread.Yield() (2 point)
yield method is used to pause the execution of currently running thread
so that other waiting thread with the same priority will get CPU to execute.


36. Advantages of multi threading (2 points)
Improves the performance because CPU is not idle incase some thread is waiting to get some resources.

37. Steps to create Thread ( 4 points)
Implement runnable interface or extend thread class 
Override the run interface method in the class 
Instantiate the thread class 
Thread.start method 

38. Serialization (3 points)
Object can be represented as a sequence of bytes
That includes: 
Object's data
Information about the object's type
Types of data stored in the object.

39. Steps for Serialization 
Implement implements java.io.Serializable
Serialize => ObjectOutPutStream
DeSerialize=> ObjectInputStream

40. Difference between Final, Finally, and finalized 
Final: This keyword is used to give restrictions to class, methods, variables
Method - Prevent Overriding (final void rr() {})
Class - Prevent Inheritance (final class RR {})
Variable - Create constant variables (final int b = 6;)
Note : If a class is declared as final then by default all of the methods present in that class are automatically final but variables are not.

Finally: ( 3 points)
It is used in association with a try/catch block and guarantees that a section of code will be executed, even if an exception is thrown. 
The finally block will be executed after the try and catch blocks, but before control transfers back to its origin.
So basically the use of finally block is resource deallocation. Means all the resources such as Network Connections, Database Connections, which we opened in try block are needed to be closed, so that we won’t lose our resources as opened. So those resources are needed to be closed in finally block.


Finalize method: ( 3 points):
It is a method that the Garbage Collector always calls just before the deletion/destroying the object which is eligible for Garbage Collection, so as to perform clean-up activity. 


41. Java Deep Copy and shallow Copy 
Shallow Copy: When an object has primitive and non primitive data types and we tried to do shallow copy. It creates a new object with all the members. However, the non-primitive data type variables still pointing to the object where we cloned from. 
Deep Copy: When an object has primitive and non primitive data types and we tried to do shallow copy. It creates a new object with all the members. However, the non-primitive data type variables NOT pointing to the object where we cloned from. Here all of the members are new including and mutable and immutable. 

42. Difference between Vector and ArrayList 
Vector: Synchronized 
ArrayList: NOT Synchronized 


**43. Stack unwinding 
It’s the process during exception handling, when destructor call for all local variables from stack in between the place where the exception is thrown and where it’s caught. 
When an exception is thrown and control passes from a try block to a handler, the C++ runtime calls destructors for all automatic objects constructed since the beginning of the try block. This process is called stack unwinding.

44. C++ Pointer and Reference Variables 
int number = 88;
int * pNumber = &number;  // Declare and assign the address of variable number to pointer pNumber (0x22ccec)
cout << pNumber<< endl;   // Print the content of the pointer variable, which contain an address (0x22ccec)
cout << *pNumber << endl; // Print the value "pointed to" by the pointer, which is an int (88)
*pNumber = 99;            // Assign a value to where the pointer is pointed to, NOT to the pointer variable
cout << *pNumber << endl; // Print the new value "pointed to" by the pointer (99)
cout << number << endl;   // The value of variable number changes as well (99)

45. Smart pointer (2 points)
Using smart pointers, we can make pointers to work in way that we don’t need to explicitly call delete.
Not deleting this type of pointers won’t make memory leak since they are smart pointers destructor delete dynamic memory allocation automatically. 


46. Types of Smart pointers 
Auto_ptr: C++ new pointer 
Unique_ptr: old deprecated 
Shared_ptr: A shared_ptr is a container for raw pointers. It is a reference counting ownership model 
Weak_ptr:  A weak_ptr is created as a copy of shared_ptr.

47. Difference between “==” and .equal()									
  a) “==” operator and .equal() is method								
  b) == reference comparison and .equal() for content comparison.				
  We can apply equality operators for every primitive types including boolean type. 
  we can also apply equality operators for object types.

48. What is Reflection API in Java?
 This is used to examine and modify the behaviour of the class, interface at runtime.  GetClass(), GetConstructor(), GetMethod()
 
49. Virtual Destructor in C++
Deleting a derived class object using a pointer to a base class that has a non-virtual destructor results in undefined behavior. To correct this situation, the base class should be defined with a virtual destructor
